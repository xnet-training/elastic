version: '3.1'

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local

networks:
  elastic:
    external: false

services:
  #
  ## Elastic Configuration
  #
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
    - "./setup.sh:/opt/setup/setup.sh"
    - "certs:/usr/share/elasticsearch/config/certs"
    - "./es-instances.yml:/usr/share/elasticsearch/config/certs/instances.yml"
    user: "0"
    command: [ "bash", "/opt/setup/setup.sh" ]
    env_file: [ .env ]
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
    - elastic
  #
  ## Elastic Elasticsearch
  #
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.0.0}
    ports:
    - "9300:9300"
    - "${ES_PORT}:9200"
    labels:
      co.elastic.logs/module: elasticsearch
    env_file: [ .env ]
    depends_on:
      setup:
        condition: service_healthy
    #healthcheck:
    #  test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
    #  interval: 1s
    #  timeout: 5s
    #  retries: 120
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - esdata01:/usr/share/elasticsearch/data
    #- "./es-instances.yml:/usr/share/elasticsearch/config/certs/instances.yml"
    #user: "0" 
    environment:
     - node.name=es01
     - cluster.name=${CLUSTER_NAME}
     - discovery.type=single-node
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=true
     - xpack.security.http.ssl.key=certs/es01/es01.key
     - xpack.security.http.ssl.certificate=certs/es01/es01.crt
     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.enabled=true
     - xpack.security.transport.ssl.key=certs/es01/es01.key
     - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.verification_mode=certificate
     - xpack.license.self_generated.type=${LICENSE}
     #- xpack.security.authc.api_key.enabled=true
    mem_limit: ${ES_MEM_LIMIT}
    #extra_hosts:
    #  es01: 127.0.0.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
    - elastic

  #
  ## Elastic Kibana
  #
  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION:-8.0.0}
    ports:
    - "${KIBANA_PORT:-5601}:5601"
    labels:
      co.elastic.logs/module: kibana
    volumes:
    - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    - certs:/usr/share/kibana/config/certs
    - kibanadata:/usr/share/kibana/data
    env_file: [ .env ]
    depends_on:
    - es01
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
      XPACK_SECURITY_ENCRYPTIONKEY: ${ENCRYPTION_KEY}
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${ENCRYPTION_KEY}
      XPACK_REPORTING_ENCRYPTIONKEY: ${ENCRYPTION_KEY}
      XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS: '["https://es01:9200"]'
    #- xpack.reporting.roles.enabled=false
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'" ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
    - elastic
  #
  ## APM Server
  #
  apm-server:
    image: docker.elastic.co/apm/apm-server:${APM_VERSION:-8.10.4}
    ports:
    - ${APM_PORT:-8200}:8200
    depends_on:
    - es01
    - kibana
    env_file: [ .env ]
    user: root
    volumes:
    - certs:/usr/share/apm-server/certs
    - "./apm-server.yml:/usr/share/apm-server/apm-server.yml:ro"
    environment:
      #ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTIC_HOSTS: "es01:9200"
      ELASTIC_USER: elastic 
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
    - elastic
  #
  ## Logstash
  #
  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    ports:
    - "9600:9600"
    - "9700:9700"
    - "5044:5044"
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
    - certs:/usr/share/logstash/certs
    - logstashdata01:/usr/share/logstash/data
    - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
    - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
    - xpack.monitoring.enabled=false
    - ELASTIC_USER=elastic
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - ELASTIC_HOSTS=https://es01:9200
    networks:
    - elastic
#  #
#  ## Fleet Server
#  #
#  fleet-server:
#    image: docker.elastic.co/elastic/fleet-server:latest
#  #docker.elastic.co/fleet-server/fleet-server:${FLEET_VERSION:-8.8.0}
#    ports:
#    - "8220:8220"
#    volumes:
#    - "./fleet-server.yml:/etc/fleet-server.yml:ro"
#    - "certs:/etc/fleet-server/certs"
#  #  env_file: [ ".env" ]
#    environment:
#      ELASTICSEARCH_HOSTS: https://es01:9200
#      ELASTICSEARCH_SERVICE_TOKEN: changeme
#      ELASTICSEARCH_CA_CERT: /etc/fleet-server/certs/ca/ca.pem
#      ELASTIC_USER: elastic
#      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
#    networks:
#    - elastic

  #
  ## Beat para metricas
  #
  metricbeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    volumes:
    - certs:/usr/share/metricbeat/certs
    - metricbeatdata01:/usr/share/metricbeat/data
    - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
    - "/var/run/docker.sock:/var/run/docker.sock:ro"
    - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
    - "/proc:/hostfs/proc:ro"
    - "/:/hostfs:ro"
    environment:
    - ELASTIC_USER=elastic
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - ELASTIC_HOSTS=https://es01:9200
    - KIBANA_HOSTS=http://kibana:5601
    - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
    - elastic
  #
  ## Beat para file
  #
  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
    - certs:/usr/share/filebeat/certs
    - filebeatdata01:/usr/share/filebeat/data
    - "./filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
    - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
    - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
    - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
    - ELASTIC_USER=elastic
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - ELASTIC_HOSTS=https://es01:9200
    - KIBANA_HOSTS=http://kibana:5601
    - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
    - elastic

  #
  ##
  #
  heartbeats01:
    image: docker.elastic.co/beats/heartbeat:${STACK_VERSION}
    command: heartbeat -e -strict.perms=false
    #- --strict.perms=false
    #- -e
    #- setup
    #environment:
    #- setup.kibana.host=kibana:5601
    #- output.elasticsearch.hosts=["es01:9200"]
    user: root 
    depends_on:
      es01:
        condition: service_healthy
    volumes:
    - certs:/usr/share/heartbeat/certs
    - "./heartbeat.yml:/usr/share/heartbeat/heartbeat.yml"
    networks:
    - elastic
